using System;
using System.Collections.Generic;

namespace Fp.Utility
{
    public static class DivisorsUtility
    {
        /// <summary>
        /// Divisors of (2^i)-1
        /// </summary>
        private static readonly int[][] _divisorsOfPowTwoMinusOne = new int[][]
        {
            //(1 << 0) -1 = 0
            Array.Empty<int>(),
            //(1 << 1) -1 = 1
            new [] {1},
            //(1 << 2) -1 = 3
            new [] {1, 3},
            //(1 << 3) -1 = 7
            new [] {1, 7},
            //(1 << 4) -1 = 15
            new [] {1, 3, 5, 15},
            //(1 << 5) -1 = 31
            new [] {1, 31},
            //(1 << 6) -1 = 63
            new [] {1, 3, 7, 9, 21, 63},
            //(1 << 7) -1 = 127
            new [] {1, 127},
            //(1 << 8) -1 = 255
            new [] {1, 3, 5, 15, 17, 51, 85, 255},
            //(1 << 9) -1 = 511
            new [] {1, 7, 73, 511},
            //(1 << 10) -1 = 1023
            new [] {1, 3, 11, 31, 33, 93, 341, 1023},
            //(1 << 11) -1 = 2047
            new [] {1, 23, 89, 2047},
            //(1 << 12) -1 = 4095
            new [] {1, 3, 5, 7, 9, 13, 15, 21, 35, 39, 45, 63, 65, 91, 105, 117, 195, 273, 315, 455, 585, 819, 1365, 4095},
            //(1 << 13) -1 = 8191
            new [] {1, 8191},
            //(1 << 14) -1 = 16383
            new [] {1, 3, 43, 127, 129, 381, 5461, 16383},
            //(1 << 15) -1 = 32767
            new [] {1, 7, 31, 151, 217, 1057, 4681, 32767},
            //(1 << 16) -1 = 65535
            new [] {1, 3, 5, 15, 17, 51, 85, 255, 257, 771, 1285, 3855, 4369, 13107, 21845, 65535},
            //(1 << 17) -1 = 131071
            new [] {1, 131071},
            //(1 << 18) -1 = 262143
            new [] {1, 3, 7, 9, 19, 21, 27, 57, 63, 73, 133, 171, 189, 219, 399, 511, 513, 657, 1197, 1387, 1533, 1971, 3591, 4161, 4599, 9709, 12483, 13797, 29127, 37449, 87381, 262143},
            //(1 << 19) -1 = 524287
            new [] {1, 524287},
            //(1 << 20) -1 = 1048575
            new [] {1, 3, 5, 11, 15, 25, 31, 33, 41, 55, 75, 93, 123, 155, 165, 205, 275, 341, 451, 465, 615, 775, 825, 1023, 1025, 1271, 1353, 1705, 2255, 2325, 3075, 3813, 5115, 6355, 6765, 8525, 11275, 13981, 19065, 25575, 31775, 33825, 41943, 69905, 95325, 209715, 349525, 1048575},
            //(1 << 21) -1 = 2097151
            new [] {1, 7, 49, 127, 337, 889, 2359, 6223, 16513, 42799, 299593, 2097151},
            //(1 << 22) -1 = 4194303
            new [] {1, 3, 23, 69, 89, 267, 683, 2047, 2049, 6141, 15709, 47127, 60787, 182361, 1398101, 4194303},
            //(1 << 23) -1 = 8388607
            new [] {1, 47, 178481, 8388607},
            //(1 << 24) -1 = 16777215
            new [] {1, 3, 5, 7, 9, 13, 15, 17, 21, 35, 39, 45, 51, 63, 65, 85, 91, 105, 117, 119, 153, 195, 221, 241, 255, 273, 315, 357, 455, 585, 595, 663, 723, 765, 819, 1071, 1105, 1205, 1365, 1547, 1687, 1785, 1989, 2169, 3133, 3315, 3615, 4095, 4097, 4641, 5061, 5355, 7735, 8435, 9399, 9945, 10845, 12291, 13923, 15183, 15665, 20485, 21931, 23205, 25305, 28197, 28679, 36873, 46995, 53261, 61455, 65793, 69615, 75915, 86037, 109655, 140985, 143395, 159783, 184365, 197379, 258111, 266305, 328965, 372827, 430185, 479349, 798915, 986895, 1118481, 1290555, 1864135, 2396745, 3355443, 5592405, 16777215},
            //(1 << 25) -1 = 33554431
            new [] {1, 31, 601, 1801, 18631, 55831, 1082401, 33554431},
            //(1 << 26) -1 = 67108863
            new [] {1, 3, 2731, 8191, 8193, 24573, 22369621, 67108863},
            //(1 << 27) -1 = 134217727
            new [] {1, 7, 73, 511, 262657, 1838599, 19173961, 134217727},
            //(1 << 28) -1 = 268435455
            new [] {1, 3, 5, 15, 29, 43, 87, 113, 127, 129, 145, 215, 339, 381, 435, 565, 635, 645, 1247, 1695, 1905, 3277, 3683, 3741, 4859, 5461, 6235, 9831, 11049, 14351, 14577, 16383, 16385, 18415, 18705, 24295, 27305, 43053, 49155, 55245, 71755, 72885, 81915, 140911, 158369, 215265, 416179, 422733, 475107, 617093, 704555, 791845, 1248537, 1851279, 2080895, 2113665, 2375535, 3085465, 6242685, 9256395, 17895697, 53687091, 89478485, 268435455},
            //(1 << 29) -1 = 536870911
            new [] {1, 233, 1103, 2089, 256999, 486737, 2304167, 536870911},
            //(1 << 30) -1 = 1073741823
            new [] {1, 3, 7, 9, 11, 21, 31, 33, 63, 77, 93, 99, 151, 217, 231, 279, 331, 341, 453, 651, 693, 993, 1023, 1057, 1359, 1661, 1953, 2317, 2387, 2979, 3069, 3171, 3641, 4681, 4983, 6951, 7161, 9513, 10261, 10923, 11627, 14043, 14949, 20853, 21483, 25487, 30783, 32767, 32769, 34881, 42129, 49981, 51491, 71827, 76461, 92349, 98301, 104643, 112871, 149943, 154473, 215481, 229383, 294903, 338613, 349867, 360437, 449829, 463419, 549791, 646443, 790097, 1015839, 1049601, 1081311, 1549411, 1649373, 2370291, 3148803, 3243933, 3848537, 4648233, 4948119, 7110873, 10845877, 11545611, 13944699, 17043521, 32537631, 34636833, 51130563, 97612893, 119304647, 153391689, 357913941, 1073741823},
            //(1 << 31) -1 = 2147483647
            new [] {1, 2147483647},
        };

        public static IReadOnlyList<int> GetDivisorsOfPowTwoMinusOne(int pow)
        {
            ThrowIfIndexOutOfSupportedRange(pow);

            return _divisorsOfPowTwoMinusOne[pow];
        }

        public static int GetDivisorsOfPowTwoMinusOne(int pow, float pct)
        {
            IReadOnlyList<int> divisors = GetDivisorsOfPowTwoMinusOne(pow);
            return divisors[(int) (divisors.Count * pct)];
        }

        private static void ThrowIfIndexOutOfSupportedRange(int pow)
        {
            if (pow <= 0 || pow >= 31)
            {
                throw new ArgumentOutOfRangeException(nameof(pow), "Supported pow is in range [1, 31]");
            }
        }
    }
}